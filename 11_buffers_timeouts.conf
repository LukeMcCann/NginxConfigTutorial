user www-data;

worker_processes auto;

events {
    worker_connections 1024;
}

http {

    include mime.types;

    # Whilst configuring processes is an easy and measurable
    # task, configuring buffers are not. This is because
    # they are not dependent on the server, but the nature
    # of the request to the server.

    # It is recommended to leave these as defaults if you 
    # are not sure why you are tweaking them at all.

    # Buffering is when a process reads data into memory 
    # (RAM) before writing it to it's next destination.
    # for example, nginx receives a request from a TCP port 
    # (80), nginx writes this request to memory (buffering)
    # or if the buffer is too small for the amount of data
    # being read, writes some of the overflow to disk.

    # The opposite of this process is nginx reads a static
    # file from disk into memory (buffering) this is sent
    # to the client from memory.

    # Timeouts suggest a cutoff time for this event.

    # Buffer size for POST submissions
    # Nginx supports bytes 100, kilobytes 100k, or megabytes (10M)
    client_body_buffer_size 10k;
    client_max_body_size 8m;

    # Too big of a buffer allocates more space than necessary
    # to the buffer wasting memory space. Too small, and
    # nginx will end up writing part of our buffer to disk,
    # which is much slower.

    # Buffer size for Header
    client_header_buffer_size 1k;

    # Max time to receive client headers/body
    # timeouts can be written is milliseconds 30, seconds 30s, minutes 30m, hours 30h, days 30d, weeks 30w, years 30y
    client_body_timeout 12;
    client_header_timeout 12;

    # Max time to keep a connection open for
    keepalive_timeout 15;

    # Max time for a client to accept_receive a response
    send_timeout 10;

    # Skip buffering for static files
    # when sending a file from disk, don't use a buffer
    sendfile on;

    # optimise sendfile packets
    tcp_nopush on;



    server {

        listen 80;
        server_name 167.129.0.1;

        index index.php index.html;

        location / {
            try_files $uri $uri/ =404;
        }

        location ~\.php$ {
            include fastcgi.conf;
            fastcgi_pass unix:/run/php/php7.1-fpm.sock;
        }
    }
}