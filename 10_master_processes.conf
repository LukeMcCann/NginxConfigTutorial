user www-data;

# Reconfigure the pid
pid /var/run/new_nginx.pid;

# The master process is the Nginx service/software
# instance which we started. That instance then spawns
# worker instances to listen for and respond to requests.

# Set default worker processes
worker_processes auto;

# Increasing workers does not necessarily equate to better
# performance. An nginx process is asynchronous, 
# they will process requests as fast as the hardware will allow
# when we have more than one CPU cores, those cores are note
# angle to share processes ona  single cpu core.
#
# most of the time we can configure nginx to use as many CPU
# cores as our server has available. Running nproc
# will tell you the number of cores available to your sevrer.
# lscpu will give you a more verbose output.
#
# Setting worker_processes to auto will set one worker for
# each of our cpu cores.
events {
    # number of connections each worker process can accept
    # this is again limited by server hardware, and the nuber
    # of CPUs available. ulimit -m will show us our limit
    # on the server.
    #
    # Worker Processes * worker Connection = Max Connections
    worker_connections 1024;
}

http {

    server {

        listen 80;
        server_name 167.0.0.1;

        index index.php index.html;

        location / {
            try_files $uri $uri/ =404;
        }

        location ~\.php$ {
            # pass php requests to the php-fpm service
            include fastcgi.conf;
            fastcgi_pass unix:/run/php/php7.1-fpm.sock;
        }
    }
}