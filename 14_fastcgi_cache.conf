# Nginx micro caches are simple
# server-side caches which allow
# us to store dynamic language responses
# to minimize server-side processing.
#
# When we write items to this micro-cache
# once we have the response from a certain 
# request, if this same request is amde again,
# there is no need to contact the PHP
# form to perform processing as we have
# the response readily available in the micro-cache.
# This means there will be times when our responses
# are fetched directly from disk reducing server load.
user www-data;

worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include mime.types;

    # Configure micro-cache (fastcgi)
    # takes argument of location to write the files to
    # it can be wise to use the /tmp directory 
    # for this as it is automatically emptied on restart
    # of most linux distros.
    #
    # Levels allows us to configure the depth
    # of directories to split the directories into.
    # If left out, nginx will write every entry to
    # the specified path directory.
    #
    # In this example we cache the items within two
    # directories, the first which will correspond
    # with the last character of the name of the file
    # the the second named with the final two characters
    # of the name of the file and so on.
    #
    # keys_zone sets the name of this cache : the size of the zone.
    #
    # Inactive tells us how long to keep a directory after the last time
    # it was accessed, default 10 minutes.
    fastcgi_cache_path 
        /tmp/nginx_cache 
        levels=1:2 
        keys_zone=ZONE_1:100m 
        inactive=60m;

    # Standard directive that takes a string format
    # from which to create cache entries
    # In this example typical domain request
    # will be identified as:
    #   $scheme       $request_method   $host          $request_uri
    #    https://           GET         domain.com      /blog/article
    fastcgi_cache_key "$scheme$request_method$host$request_uri";
    
    server {

        listen 80;
        server_name 167.0.0.1;

        root /sites/name;

        index index.php index.html;

        # Cache Exceptions
        set $no_cache 0;

        if ($arg_skipcache = 1) {
            set $no_cache 1;
        }

        location / {
            try_files $uri $uri/ =404;
        }

        location ~\.php$ {
            include fastcgi.conf;
            fastcgi_pass unix:/run/php7.1-fpm.sock;

            # Enable fastcgi cache
            fastcgi_cache ZONE_1;
            # fine tune validity of cached repsonses
            # This is an array directive which takes
            # any number of response codes, and the time
            # that they are to be valid for. 
            fastcgi_cache_valid 200 60m;

            # bypass caching if no_cache is true
            fastcgi_cache_bypass $no_cache;
            fastcgi_no_cache $no_cache;
        }
    }
}